name: CI

on:
  pull_request:
  push:
    paths-ignore:
    - '**.md'
    branches:
      - master

jobs:
  relock:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}
    - uses: nixbuild/nix-quick-install-action@v32
    - run: nix flake lock
    - uses: stefanzweifel/git-auto-commit-action@v6
      with:
        commit_message: Update flake.lock
        file_pattern: flake.lock

  nix-matrix:
    needs: relock
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - uses: nixbuild/nix-quick-install-action@v32
      - id: set-matrix
        name: Generate Nix Matrix
        run: |
          set -Eeu
          echo "matrix=$(nix eval --json '.#githubActions.matrix')" >> "$GITHUB_OUTPUT"

  build:
    needs: nix-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{fromJSON(needs.nix-matrix.outputs.matrix)}}
    timeout-minutes: 30 # Safety net in case of hanging executable
    steps:
      - uses: actions/checkout@v4
      - uses: nixbuild/nix-quick-install-action@v32
      - uses: cachix/cachix-action@v16
        with:
          name: emacs-ci
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
      - run: nix build --accept-flake-config --system ${{matrix.system}} -L ".#githubActions.checks.${{matrix.system}}.${{ matrix.attr }}"
      - name: Test if package.el works inside Emacs
        run: cd tests && HOME=$(pwd) nix run --accept-flake-config --system ${{matrix.system}} "..#githubActions.checks.${{matrix.system}}.${{ matrix.attr }}" -- -Q --batch \
               --eval "(setq debug-on-error t)" --load init.el
